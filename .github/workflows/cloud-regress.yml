name: Cloud Extensions Test
on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    #          ┌───────────── minute (0 - 59)
    #          │ ┌───────────── hour (0 - 23)
    #          │ │ ┌───────────── day of the month (1 - 31)
    #          │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #          │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    - cron:  '45 1 * * *' # run once a day, timezone is utc
  workflow_dispatch: # adds ability to run this manually
    inputs:
      region_id:
        description: 'Project region id. If not set, the default region will be used'
        required: false
        default: 'aws-us-east-2'

defaults:
  run:
    shell: bash -euxo pipefail {0}

permissions:
  id-token: write # aws-actions/configure-aws-credentials
  statuses: write
  contents: write

jobs:
  regress:
    env:
      POSTGRES_DISTRIB_DIR: /tmp/neon/pg_install
      TEST_OUTPUT: /tmp/test_output
      BUILD_TYPE: remote
    strategy:
      fail-fast: false
      matrix:
        pg-version: [17]

    runs-on: small
    container:
      image: ghcr.io/neondatabase/neon-test-extensions-v${{ matrix.pg-version }}:14512141428
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --init

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Evaluate the settings
        id: project-settings
        run: |
          if [[ $((${{ matrix.pg-version }})) -lt 17 ]]; then
            ULID=ulid
          else
            ULID=pgx_ulid
          fi
          LIBS=timescaledb:rag_bge_small_en_v15,rag_jina_reranker_v1_tiny_en:$ULID
          settings=$(jq -c -n --arg libs $LIBS '{preload_libraries:{use_defaults:false,enabled_libraries:($libs| split(":"))}}')
          echo settings=$settings >> $GITHUB_OUTPUT
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ vars.DEV_AWS_OIDC_ROLE_ARN }}
          role-duration-seconds: 900

      - name: Create Neon Project
        id: create-neon-project
        uses: ./.github/actions/neon-project-create
        with:
          region_id: ${{ inputs.region_id }}
          postgres_version: ${{ matrix.pg-version }}
          project_settings: ${{ steps.project-settings.outputs.settings }}
          default_endpoint_settings: '{"pg_settings":{"DateStyle":"Postgres,MDY","TimeZone":"America/Los_Angeles","compute_query_id":"off","max_worker_processes":"10","neon.allow_unstable_extensions":"on"}}'
          api_key: ${{ secrets.NEON_STAGING_API_KEY }}
          admin_api_key: ${{ secrets.NEON_STAGING_ADMIN_API_KEY }}

      - name: Run the regression tests
        run: |
          cd /ext-src/pg_mooncake-src
          if [[ -v BENCHMARK_CONNSTR ]]; then
            uri_no_proto="${BENCHMARK_CONNSTR#postgres://}"
            uri_no_proto="${uri_no_proto#postgresql://}"
            if [[ $uri_no_proto == *\?* ]]; then
              base="${uri_no_proto%%\?*}"       # before '?'
            else
              base="$uri_no_proto"
            fi
            if [[ $base =~ ^([^:]+):([^@]+)@([^:/]+):?([0-9]*)/(.+)$ ]]; then
              export PGUSER="${BASH_REMATCH[1]}"
              export PGPASSWORD="${BASH_REMATCH[2]}"
              export PGHOST="${BASH_REMATCH[3]}"
              export PGPORT="${BASH_REMATCH[4]:-5432}"
              export PGDATABASE="${BASH_REMATCH[5]}"
            else
              echo "Invalid PostgreSQL base URI"
              exit 1
            fi
          fi
          #aws s3 ls s3://neon-github-ci-tests
          dropdb --if-exists contrib_regression
          createdb contrib_regression
          mkdir -p /ext-src/pg_mooncake-src/results/unsupported
          psql -d contrib_regression -c "CREATE EXTENSION pg_mooncake" -c "SELECT mooncake.create_secret('amazon', 'S3', '${AWS_ACCESS_KEY_ID}', '${AWS_SECRET_ACCESS_KEY}', '{\"ENDPOINT\": \"s3.eu-central-1.amazonaws.com\", \"REGION\": \"eu-central-1\"}');" \
            -c "ALTER DATABASE contrib_regression SET mooncake.default_bucket = 's3://neon-github-ci-tests'"
          psql -d contrib_regression -c "SELECT * FROM mooncake.secrets" -c "SHOW mooncake.default_bucket"
          /usr/local/pgsql/lib/pgxs/src/makefiles/../../src/test/regress/pg_regress --use-existing --inputdir=./ --bindir='/usr/local/pgsql/bin'    \
            --inputdir=./test --load-extension=pg_mooncake --dbname=contrib_regression approx_count_distinct columns constraints copy create_table_as \
            cursor non_superuser returning sanity segment_elimination transaction trigger unsupported/alter unsupported/columns unsupported/update unsupported/types update_delete_with_join || true
          if [ -f regression.diffs ]; then
            cat regression.diffs
            exit 1
          fi
        env:
          BENCHMARK_CONNSTR: ${{ steps.create-neon-project.outputs.dsn }}
          SKIP: "pg_hint_plan-src,pg_repack-src,pg_cron-src,plpgsql_check-src"

      - name: Delete Neon Project
        if: ${{ always() }}
        uses: ./.github/actions/neon-project-delete
        with:
          project_id: ${{ steps.create-neon-project.outputs.project_id }}
          api_key: ${{ secrets.NEON_STAGING_API_KEY }}